// Optimized functions from /Users/giraffe/Downloads/Work/Solana/ebpf/memo_onchain.so
// Generated by AI Function Optimizer
// Function names suggested by AI, metadata preserved

// Original Name: sub_1000000e8
// Suggested Name: math_ops_function_1000000e8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000000e8

int64_t var_30
sub_100000548(&var_30, arg1)
int64_t var_18
int64_t var_38 = var_18
int64_t var_20
int64_t var_40 = var_20
int64_t var_28
int64_t var_48 = var_28
void var_58
void* r6_1
int64_t r7_1
r6_1, r7_1 = sub_100000430(&var_58, &var_48)
int32_t r3_1 = sub_1000019d8(&var_30, r6_1, r7_1)

if (var_30 == 1)
    int32_t var_60
    sub_100000488(&var_60, 2, r3_1)
    uint64_t r1_8 = zx.q(var_60)
    int32_t var_5c
    
    if (r1_8 != 0xc)
        sub_1000004a0(r1_8, zx.q(var_5c))

int64_t result
void* r7_2
result, r7_2 = sub_1000003b0(&var_48)
sub_100000378(r7_2)
return result

// Original Name: sub_100000238
// Suggested Name: math_ops_function_100000238
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000238

void* r1 = *arg1
int64_t result = sub_100000470(r1, *r1 - 1)
void* r1_1 = *arg1

if (*r1_1 == 0)
    result = sub_100000470(r1_1 + 8, *(r1_1 + 8) - 1)
    void* r1_3 = *arg1
    
    if (*(r1_3 + 8) == 0)
        return sub_1000004c0(r1_3, 0x20)

return result

// Original Name: sub_1000002d0
// Suggested Name: math_ops_function_1000002d0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000002d0

void* r1 = *arg1
int64_t result = sub_100000470(r1, *r1 - 1)
void* r1_1 = *arg1

if (*r1_1 == 0)
    result = sub_100000470(r1_1 + 8, *(r1_1 + 8) - 1)
    void* r1_3 = *arg1
    
    if (*(r1_3 + 8) == 0)
        return sub_1000004c0(r1_3, 0x28)

return result

// Original Name: sub_100000368
// Suggested Name: math_ops_function_100000368
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000368

return *arg1

// Original Name: sub_100000378
// Suggested Name: math_ops_function_100000378
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000378

int64_t r2_1 = *(arg1 + 8)

if (r2_1 != 0)
    sub_1000004c0(*arg1, r2_1 * 0x30)

// Original Name: sub_1000003b0
// Suggested Name: math_ops_function_1000003b0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000003b0

void* result = sub_100000368(arg1)
int64_t r7 = *(arg1 + 0x10)

if (r7 != 0)
    int64_t i = r7 * 0x30
    void* r6_1 = result + 0x10
    
    do
        void* r6_3
        result, r6_3 = sub_1000002d0(sub_100000238(r6_1 - 8))
        r6_1 = r6_3 + 0x30
        i -= 0x30
    while (i != 0)

return result

// Original Name: sub_100000430
// Suggested Name: math_ops_function_100000430
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000430

int64_t result = sub_100000368(arg2)
*arg1 = result
*(arg1 + 8) = *(arg2 + 0x10)
return result

// Original Name: sub_100000470
// Suggested Name: math_ops_function_100000470
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000470

int64_t result = *arg1
*arg1 = arg2
return result

// Original Name: sub_100000488
// Suggested Name: math_ops_function_100000488
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000488

*(arg1 + 4) = arg3
*arg1 = arg2

// Original Name: sub_1000004a0
// Suggested Name: math_ops_function_1000004a0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000004a0

return sub_1000012f8(arg1, arg2)

// Original Name: sub_1000004b0
// Suggested Name: math_ops_function_1000004b0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000004b0

return sub_100001860(arg1)

// Original Name: sub_1000004c0
// Suggested Name: math_ops_function_1000004c0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000004c0

return sub_100001878(arg1, arg2)

// Original Name: sub_1000004d0
// Suggested Name: math_ops_function_1000004d0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000004d0

return sub_1000018a0(arg1, arg2, arg3, arg4)

// Original Name: sub_1000004e0
// Suggested Name: math_ops_function_1000004e0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000004e0

return sub_100001860(arg1)

// Original Name: sub_1000004f0
// Suggested Name: math_ops_function_1000004f0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000004f0

*(arg1 + 8) = 8
*arg1 = 0x30

// Original Name: sub_100000518
// Suggested Name: math_ops_function_100000518
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000518

return 

// Original Name: sub_100000520
// Suggested Name: math_ops_function_100000520
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000520

*(arg1 + 8) = arg3
*arg1 = arg2

// Original Name: sub_100000538
// Suggested Name: math_ops_function_100000538
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000538

return arg1

// Original Name: sub_100000548
// Suggested Name: associated_token_handler_100000548
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000548

int64_t var_48
void* result
int64_t r6_1
int64_t r7_1
result, r6_1, r7_1 = sub_100000e90(&var_48, *arg2, 0)
int64_t var_28 = r7_1
int64_t var_38 = var_48
void* r8 = 8
int64_t var_40

if (r6_1 != 0)
    r8 = 8
    void* r6_2 = nullptr
    void* r9_1 = nullptr
    
    do
        result = sub_1000012d0(1)
        void* r9_3 = r9_1 + result
        int64_t r1_15 = 1
        
        if (r6_2 u<= r9_3)
            r1_15 = 0
        
        if (r1_15 == 1)
            break
        
        int40_t var_18
        char var_1d
        char var_1c
        char var_1b
        char var_1a
        char var_19
        
        if (zx.q(*(arg2 + r8)) == 0xff)
            void* r6_7 = r8 + arg2
            uint64_t r1_29 = zx.q(*(arg2 + r8 + 1))
            uint64_t r1_30 = zx.q(*(r6_7 + 2))
            void* r0_2 = sub_1000004b0(0x20)
            void* r7_8
            void* r9_4
            
            if (r0_2 != 0)
                *(r0_2 + 0x10) = 0
                *(r0_2 + 8) = 1
                *r0_2 = 1
                *(r0_2 + 0x18) = r6_7 + 0x23
                r9_4 = *(r6_7 + 0x2b)
                r7_8 = sub_1000004b0(0x28)
            
            if (r0_2 == 0 || r7_8 == 0)
                sub_100001908()
                syscall()
                return sub_100000e30(nullptr, 0) __tailcall
            
            *(r7_8 + 0x18) = arg2 + r8 + 0x33
            *(r7_8 + 0x20) = r9_4
            *(r7_8 + 0x10) = 0
            char r3_15 = 1
            *(r7_8 + 8) = 1
            *r7_8 = 1
            char r1_37 = 1
            
            if (r1_30 == 0)
                r1_37 = 0
            
            void* r9_5 = r9_4 + r8 + 0x33
            char r1_38 = 1
            
            if (r1_29 == 0)
                r1_38 = 0
            
            void* r8_7 = arg2 + r9_5
            
            if (zx.q(*(r8_7 + 0x20)) == 0)
                r3_15 = 0
            
            void* r6_8 = r6_7 + 3
            int64_t r1_40 = *(r8_7 + 0x21)
            
            if (var_28 == var_40)
                r6_8, r7_8, r8_7, r9_5 = sub_100000e30(&var_38, 1)
            
            var_18:4.b = var_19
            var_18.d = ((zx.q(var_1a) << 8 | zx.q(var_1b)) << 0x10).d | (zx.q(var_1c) << 8).d | zx.d(var_1d)
            void* r0_5 = sub_100000fd8(&var_38) + var_28 * 0x30
            *(r0_5 + 0x29) = r1_37
            *(r0_5 + 0x2a) = r3_15
            *(r0_5 + 0x20) = r1_40
            *(r0_5 + 0x18) = r8_7
            *(r0_5 + 0x10) = r7_8
            *(r0_5 + 8) = r0_2
            *r0_5 = r6_8
            *(r0_5 + 0x28) = r1_38
            result = r0_5 + 0x2b
            r8 = r9_5 + 0x29
        else
            void* var_58
            int64_t r7_4 = sub_100000e50(&var_58, &var_38)
            int64_t var_50
            
            if (var_50 u<= r7_4)
                sub_100002dc0(&data_100003a90, r7_4, var_50)
                noreturn
            
            void* r8_3 = var_58 + r7_4 * 0x30
            void* r1_22 = *(r8_3 + 8)
            int64_t i = *r1_22 + 1
            
            if (i u> 1)
                goto label_1000009b0
            
            char r3_12
            char r3_13
            int64_t r3_14
            void* r9_2
            
            do
                syscall()
                syscall()
                label_1000009b0:
                r3_12 = *(r8_3 + 0x29)
                r3_13 = *(r8_3 + 0x28)
                r3_14 = *r8_3
                sub_1000012e0(r1_22, i)
                r9_2 = *(r8_3 + 0x10)
                i = *r9_2 + 1
            while (i u<= 1)
            
            sub_1000012e0(r9_2, i)
            int64_t r6_3 = *(r8_3 + 0x20)
            char r1_24 = *(r8_3 + 0x2a)
            int64_t r7_2 = *(r8_3 + 0x18)
            
            if (var_28 == var_40)
                r6_3, r7_2, r9_2 = sub_100000e30(&var_38, 1)
            
            var_18:4.b = var_19
            var_18.d = ((zx.q(var_1a) << 8 | zx.q(var_1b)) << 0x10).d | (zx.q(var_1c) << 8).d | zx.d(var_1d)
            void* r0_1 = sub_100000fd8(&var_38) + var_28 * 0x30
            *(r0_1 + 0x29) = r3_12
            *(r0_1 + 0x2a) = r1_24
            *(r0_1 + 0x20) = r6_3
            *(r0_1 + 0x18) = r7_2
            *(r0_1 + 0x10) = r9_2
            *(r0_1 + 8) = r1_22
            *r0_1 = r3_14
            *(r0_1 + 0x28) = r3_13
            result = r0_1 + 0x2b
            r8 += 1
        *(result + 4) = var_18:4.b
        *(result + 3) = var_18:3.b
        *(result + 2) = var_18:2.b
        *(result + 1) = var_18:1.b
        *result = var_18.b
        var_28 += 1
        r9_1 = r9_3
        r6_2 = r9_1
    while (r6_1 u> r9_1)

void* r1_18 = *(arg2 + r8)
int64_t r2_11 = var_38
*arg1 = arg2 + r1_18 + r8 + 8
*(arg1 + 8) = r2_11
*(arg1 + 0x10) = var_40
*(arg1 + 0x18) = var_28
*(arg1 + 0x28) = r1_18
*(arg1 + 0x20) = arg2 + r8 + 8
return result

// Original Name: sub_100000e30
// Suggested Name: math_ops_function_100000e30
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000e30

return sub_100000fe8(arg1, *(arg1 + 0x10), arg2)

// Original Name: sub_100000e50
// Suggested Name: math_ops_function_100000e50
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000e50

int64_t result = sub_100000fd8(arg2)
*arg1 = result
*(arg1 + 8) = *(arg2 + 0x10)
return result

// Original Name: sub_100000e90
// Suggested Name: math_ops_function_100000e90
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000e90

int64_t var_10
int64_t r6_1 = sub_100003370(&var_10, arg2, 0, 0x30, 0)
int64_t r1_1 = 1
int64_t var_8

if (var_8 == 0)
    r1_1 = 0

if (r1_1 == 1)
    sub_100000fc8()
    noreturn

int64_t r8 = var_10
int64_t r1_2 = 8

if (r8 != 0)
    if (arg3 != 0)
        r1_2 = sub_1000004e0(r8)
        
        if (r1_2 == 0)
            r1_2 = sub_100001908()
            syscall()
    else
        r1_2 = sub_1000004b0(r8)
        
        if (r1_2 == 0)
            r1_2 = sub_100001908()
            syscall()

int64_t result = sub_100000538(r1_2)
*arg1 = result
*(arg1 + 8) = r6_1
return result

// Original Name: sub_100000fc8
// Suggested Name: math_ops_function_100000fc8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000fc8

sub_1000018e8()
noreturn

// Original Name: sub_100000fd8
// Suggested Name: math_ops_function_100000fd8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000fd8

return *arg1

// Original Name: sub_100000fe8
// Suggested Name: associated_token_handler_100000fe8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100000fe8

int64_t r7 = *(arg1 + 8)

if (r7 - arg2 u< arg3)
    int64_t r9_2 = arg2 + arg3
    int64_t r1_2 = 1
    
    if (arg2 u<= r9_2)
        r1_2 = 0
    
    if (r1_2 == 1)
        int64_t var_40
        sub_100000520(&var_40, r9_2, 0)
        void var_50
        int64_t var_38
        sub_100000520(&var_50, var_40, var_38)
        int64_t var_48
        
        if (var_48 != 0)
            sub_100002cf0(&data_100003aa8)
            noreturn
        
        sub_1000018e8()
        noreturn
    
    int64_t var_10
    sub_1000004f0(&var_10)
    int64_t r3_1 = var_10
    int64_t var_8
    int64_t r2_5 = (r3_1 + var_8 - 1) & 0xffffffffffffffff
    int64_t r1_7 = 1
    
    if (r3_1 u<= r2_5)
        r1_7 = 0
    
    int64_t r7_1 = r7 << 1
    
    if (r7_1 u<= r9_2)
        r7_1 = r9_2
    
    if ((r1_7 & 1) != 0)
        label_1000012a0:
        void var_30
        sub_100000520(&var_30, r9_2, 0)
        int64_t var_28
        
        if (var_28 != 0)
            sub_100002cf0(&data_100003aa8)
            noreturn
        
        sub_1000018e8()
        noreturn
    
    int64_t var_20
    void* r6 = sub_100003370(&var_20, r2_5, 0, r7_1, 0)
    int64_t r1_10 = 1
    int64_t var_18
    
    if (var_18 == 0)
        r1_10 = 0
    
    if ((r1_10 & 1) != 0)
        goto label_1000012a0
    
    r9_2 = var_20
    
    if (var_8 == 0)
        goto label_1000012a0
    
    int64_t r2_7 = *(r6 + 8)
    void* r0_1
    
    if (r2_7 != 0)
        int64_t r8_1
        r0_1, r6, r7_1, r8_1, r9_2 = sub_1000004d0(*r6, r2_7 * 0x30, 8, r9_2)
        
        if (r0_1 == 0)
            sub_100001908()
            r0_1 = syscall()
    else
        r0_1 = sub_1000004b0(r9_2)
        
        if (r0_1 == 0)
            sub_100001908()
            r0_1 = syscall()
    
    int64_t r0 = sub_100000538(r0_1)
    *(r6 + 8) = r7_1
    *r6 = r0

// Original Name: sub_1000012c8
// Suggested Name: math_ops_function_1000012c8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000012c8

syscall()
return sub_1000012d0(arg1) __tailcall

// Original Name: sub_1000012d0
// Suggested Name: math_ops_function_1000012d0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000012d0

return arg1

// Original Name: sub_1000012e0
// Suggested Name: math_ops_function_1000012e0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000012e0

int64_t result = *arg1
*arg1 = arg2
return result

// Original Name: sub_1000012f8
// Suggested Name: math_ops_function_1000012f8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000012f8

uint64_t r1 = arg1 << 0x20 u>> 0x20

if (r1 s> 5)
    if (r1 s<= 8)
        if (r1 == 6)
            return 0x700000000
        
        if (r1 == 7)
            return 0x800000000
        
        return 0x900000000
    
    if (r1 == 9)
        return 0xa00000000
    
    if (r1 == 0xa)
        return 0xb00000000
    
    return 0xc00000000

if (r1 s> 2)
    if (r1 == 3)
        return 0x400000000
    
    if (r1 == 4)
        return 0x500000000
    
    return 0x600000000

uint64_t r0

if (r1 == 0)
    uint64_t r2_1 = arg2 << 0x20 u>> 0x20
    r0 = 0x100000000
    
    if (r2_1 != 0)
        return r2_1
else
    r0 = 0x200000000
    
    if (r1 != 1)
        return 0x300000000

return r0

// Original Name: sub_100001498
// Suggested Name: math_ops_function_100001498
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001498

return syscall()

// Original Name: sub_1000014a8
// Suggested Name: math_ops_function_1000014a8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000014a8

void* r0_5 = sub_100001938(arg1)

if (r0_5 == 0)
    syscall(0, 0, 0, 0)
    syscall(0, 0, 0, 0)

int64_t s
__builtin_memset(&s, 0, 0x80)
int64_t var_c0
sub_100001978(&var_c0, r0_5)
int64_t r2_1 = var_c0
int64_t var_b8
void var_18
sub_100001730(&var_18, r2_1, r2_1 + var_b8)
void* var_30
sub_100001758(&var_30, &var_18)
void* r2_3 = var_30
int64_t var_28
void* r5

if (r2_3 != var_28)
    int64_t i_1
    int64_t i = i_1
    
    while (0x80 u> i)
        r5 = &s + i
        *r5 = *r2_3
        i += 1
        r2_3 += 1
        
        if (var_28 == r2_3)
            break

while (true)
    uint64_t r7_3 = sub_1000019a0(r0_5) << 0x20 u>> 0x20
    uint64_t r0_4 = sub_1000019b0(r0_5) << 0x20 u>> 0x20
    int64_t* r1_7 = &s
    syscall(r1_7, 0x80, r7_3, r0_4, r5)
    syscall(r1_7, 0x80, r7_3, r0_4, r5)

// Original Name: sub_100001700
// Suggested Name: math_ops_function_100001700
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001700

syscall(0, 0, 0, 0)
syscall(0, 0, 0, 0)
return sub_100001730(nullptr, 0, 0) __tailcall

// Original Name: sub_100001730
// Suggested Name: math_ops_function_100001730
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001730

*(arg1 + 0x10) = 0
*(arg1 + 8) = arg3
*arg1 = arg2

// Original Name: sub_100001758
// Suggested Name: math_ops_function_100001758
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001758

*(arg1 + 0x10) = *(arg2 + 0x10)
*(arg1 + 8) = *(arg2 + 8)
*arg1 = *arg2

// Original Name: sub_100001790
// Suggested Name: math_ops_function_100001790
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001790

int64_t r9 = arg5
void* result = syscall(r9, 0)

if (result != 0)
    if (arg3 u<= r9)
        r9 = arg3
    
    sub_100003318(result, arg2, r9)
    syscall(arg3, arg2)

return result

// Original Name: sub_100001828
// Suggested Name: math_ops_function_100001828
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001828

sub_100001498()
sub_100001700()
syscall()
return sub_100001858() __tailcall

// Original Name: sub_100001858
// Suggested Name: math_ops_function_100001858
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001858

return 

// Original Name: sub_100001860
// Suggested Name: math_ops_function_100001860
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001860

return syscall(arg1, 0)

// Original Name: sub_100001878
// Suggested Name: math_ops_function_100001878
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001878

return syscall(arg2, arg1, arg1)

// Original Name: sub_1000018a0
// Suggested Name: math_ops_function_1000018a0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000018a0

return sub_100001790(1, arg1, arg2, arg3, arg4)

// Original Name: sub_1000018d8
// Suggested Name: math_ops_function_1000018d8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000018d8

sub_1000014a8(arg1)
noreturn

// Original Name: sub_1000018e8
// Suggested Name: associated_token_handler_1000018e8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000018e8

sub_100002cf0(&data_100003ad0)
noreturn

// Original Name: sub_100001908
// Suggested Name: math_ops_function_100001908
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001908

sub_100001828()
syscall()
return sub_100001918(nullptr) __tailcall

// Original Name: sub_100001918
// Suggested Name: math_ops_function_100001918
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001918

return *arg1

// Original Name: sub_100001928
// Suggested Name: math_ops_function_100001928
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001928

return -0x6a9975de0a946696

// Original Name: sub_100001938
// Suggested Name: math_ops_function_100001938
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001938

return arg1 + 0x18

// Original Name: sub_100001950
// Suggested Name: math_ops_function_100001950
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001950

*(arg1 + 0x14) = arg5
*(arg1 + 0x10) = arg4
*(arg1 + 8) = arg3
*arg1 = arg2

// Original Name: sub_100001978
// Suggested Name: math_ops_function_100001978
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001978

*(arg1 + 8) = *(arg2 + 8)
*arg1 = *arg2

// Original Name: sub_1000019a0
// Suggested Name: math_ops_function_1000019a0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000019a0

return zx.q(*(arg1 + 0x10))

// Original Name: sub_1000019b0
// Suggested Name: math_ops_function_1000019b0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000019b0

return zx.q(*(arg1 + 0x14))

// Original Name: sub_1000019c0
// Suggested Name: math_ops_function_1000019c0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000019c0

*(arg1 + 8) = arg3
*arg1 = arg2

// Original Name: sub_1000019d8
// Suggested Name: math_ops_function_1000019d8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000019d8

int64_t var_28
int64_t result
void* r6_1
int64_t r7_1
int64_t r8
result, r6_1, r7_1, r8 = sub_100001bd8(&var_28, arg2, arg3)
char var_1b
char var_1a
uint16_t r1_3 = (zx.q(var_1a) << 8).w | zx.w(var_1b)
char var_1f
char var_1e
char var_1d
char var_1c
uint32_t r2_7 = ((zx.q(var_1c) << 8 | zx.q(var_1d)) << 0x10).d | (zx.q(var_1e) << 8).d | zx.d(var_1f)
char var_20
uint64_t r1_7 = zx.q(var_20)
int64_t r1_13

if (r1_7 == 2)
    *(r6_1 + 0x10) = r8
    *(r6_1 + 8) = r7_1
    r1_13 = 0
else
    int64_t r2_8 = var_28
    char var_19
    char var_12_1 = var_19
    uint16_t var_14_1 = r1_3
    uint32_t var_18_1 = r2_7
    uint32_t var_10_1 = r2_7
    uint16_t var_c_1 = r1_3
    char var_a_1 = var_19
    var_28:6.b = var_19
    var_28:4.w = r1_3
    var_28.d = r2_7
    *(r6_1 + 0x10) = r1_7.b
    *(r6_1 + 8) = r2_8
    *(r6_1 + 0x17) = var_28:6.b
    uint64_t r1_9 = zx.q(var_28.d)
    *(r6_1 + 0x14) = (r1_9 u>> 0x18).b
    *(r6_1 + 0x13) = (r1_9 u>> 0x10).b
    *(r6_1 + 0x11) = r1_9.b
    *(r6_1 + 0x12) = (r1_9 u>> 8).b
    uint64_t r1_11 = zx.q(var_28:4.w)
    *(r6_1 + 0x15) = r1_11.b
    *(r6_1 + 0x16) = (r1_11 u>> 8).b
    r1_13 = 1

*r6_1 = r1_13
return result

// Original Name: sub_100001bd8
// Suggested Name: math_ops_function_100001bd8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100001bd8

int64_t r8_1 = arg3 - 0xf

if (arg3 u<= 0xf)
    r8_1 = 0

int64_t result = sub_100002218(arg2, 8)

if (arg3 == 0)
    label_100001c78:
    *(arg1 + 8) = 2
else
    int64_t r1_1 = 0
    
    while (true)
        uint64_t r6_1 = zx.q(*(arg2 + r1_1))
        int64_t r5_3 = r6_1 << 0x38 s>> 0x38
        
        if (0 s> r5_3)
            uint64_t r4_17 = zx.q(*(0x100003767 + r6_1))
            int64_t r4_19
            int16_t r2_1
            
            if (r4_17 == 2)
                r4_19 = r1_1 + 1
                void* r3_2
                
                if (arg3 u<= r4_19)
                    label_100001df0:
                    r3_2 = arg1
                    *(r3_2 + 8) = 0
                    label_1000021c0:
                    *r3_2 = r1_1
                    int16_t var_4
                    *(r3_2 + 0xc) = var_4
                    int16_t var_6
                    *(r3_2 + 0xa) = var_6
                    int16_t var_2
                    *(r3_2 + 0xe) = var_2
                    break
                
                if ((zx.q(*(arg2 + r4_19)) & 0xc0) != 0x80)
                    label_100001dc0:
                    r2_1 = 0x101
                    label_1000021b0:
                    r3_2 = arg1
                    *(r3_2 + 8) = r2_1
                    goto label_1000021c0
            else if (r4_17 == 3)
                if (arg3 u<= r1_1 + 1)
                    goto label_100001df0
                
                uint64_t r4_24 = zx.q(*(arg2 + r1_1 + 1))
                
                if (r6_1 == 0xe0)
                    if ((r4_24 & 0xe0) != 0xa0)
                        goto label_100001dc0
                else if (r6_1 == 0xed)
                    if (r4_24 << 0x38 s>> 0x38 s> -1 || 0xa0 u<= r4_24)
                        goto label_100001dc0
                else if (zx.q(r5_3.b + 0x1f) u> 0xb)
                    if (r4_24 u> 0xbf || (r5_3 & 0xfe) != 0xee || r4_24 << 0x38 s>> 0x38 s> -1)
                        goto label_100001dc0
                else if (r4_24 << 0x38 s>> 0x38 s> -1 || 0xc0 u<= r4_24)
                    goto label_100001dc0
                
                r4_19 = r1_1 + 2
                
                if (arg3 u<= r4_19)
                    goto label_100001df0
                
                if ((zx.q(*(arg2 + r4_19)) & 0xc0) != 0x80)
                    label_100002188:
                    r2_1 = 0x201
                    goto label_1000021b0
            else
                if (r4_17 != 4)
                    goto label_100001dc0
                
                if (arg3 u<= r1_1 + 1)
                    goto label_100001df0
                
                uint64_t r4_25 = zx.q(*(arg2 + r1_1 + 1))
                
                if (r6_1 == 0xf0)
                    if (0x30 u<= zx.q(r4_25.b + 0x70))
                        goto label_100001dc0
                else if (r6_1 == 0xf4)
                    if (r4_25 << 0x38 s>> 0x38 s> -1 || 0x90 u<= r4_25)
                        goto label_100001dc0
                else if (r4_25 u> 0xbf || zx.q(r5_3.b + 0xf) u> 2 || r4_25 << 0x38 s>> 0x38 s> -1)
                    goto label_100001dc0
                
                if (arg3 u<= r1_1 + 2)
                    goto label_100001df0
                
                if ((zx.q(*(arg2 + r1_1 + 2)) & 0xc0) != 0x80)
                    goto label_100002188
                
                r4_19 = r1_1 + 3
                
                if (arg3 u<= r4_19)
                    goto label_100001df0
                
                if ((zx.q(*(arg2 + r4_19)) & 0xc0) != 0x80)
                    r2_1 = 0x301
                    goto label_1000021b0
            r1_1 = r4_19 + 1
        else if (result == -1 || ((result - r1_1) & 7) != 0)
            r1_1 += 1
        else
            if (r1_1 u< r8_1)
                do
                    void* r4_7 = arg2 + r1_1
                    
                    if (((*(r4_7 + 8) | *r4_7) & 0x8080808080808080) != 0)
                        break
                    
                    r1_1 += 0x10
                while (r8_1 u> r1_1)
            
            if (r1_1 u< arg3)
                while (0 s<= zx.q(*(arg2 + r1_1)) << 0x38 s>> 0x38)
                    r1_1 += 1
                    
                    if (arg3 == r1_1)
                        goto label_100001c78
        
        if (arg3 u<= r1_1)
            goto label_100001c78

return result

// Original Name: sub_100002200
// Suggested Name: math_ops_function_100002200
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002200

*(arg1 + 8) = arg3
*arg1 = arg2

// Original Name: sub_100002218
// Suggested Name: associated_token_handler_100002218
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002218

int64_t r4_1 = arg2 - (arg2 u>> 1 & 0x5555555555555555)
int64_t r5_2 = (r4_1 & 0x3333333333333333) + (r4_1 u>> 2 & 0x3333333333333333)

if ((((r5_2 + (r5_2 u>> 4)) & 0xf0f0f0f0f0f0f0f) * 0x101010101010101) u>> 0x38 != 1)
    sub_100002cf0(&data_100003b00)
    noreturn

int64_t r3_6 = (arg2 - 1) & arg1

if (r3_6 == 0)
    return 0

return arg2 - r3_6

// Original Name: sub_100002340
// Suggested Name: math_ops_function_100002340
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002340

*(arg1 + 8) = arg3
*arg1 = arg2

// Original Name: sub_100002358
// Suggested Name: math_ops_function_100002358
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002358

int64_t r9 = *(arg5 - 0xff8)
int64_t r1 = *(arg5 - 0x1000)
uint64_t r1_1
int64_t r2
int64_t r8_2

if (arg2 == 0)
    r2 = 0x2d
    r1_1 = zx.q(*(arg1 + 0x50))
    r8_2 = r9 + 1
else
    r1_1 = zx.q(*(arg1 + 0x50))
    int64_t r8_1 = r1_1 & 1
    r2 = 0x110000
    
    if (r8_1 != 0)
        r2 = 0x2b
    
    r8_2 = r8_1 + r9

int64_t r3 = 0

if ((r1_1 & 4) != 0)
    void* var_10
    sub_100002200(&var_10, arg3, arg3 + arg4)
    int64_t r1_4 = 0
    void* r3_3 = var_10
    int64_t var_8
    
    if (r3_3 != var_8)
        r1_4 = 0
        
        do
            arg5 = zx.q(*r3_3) & 0xc0
            int64_t r4 = 1
            
            if (arg5 != 0x80)
                r4 = 0
            
            r1_4 += r4
            r3_3 += 1
        while (var_8 != r3_3)
    
    r8_2 = r8_2 + arg4 - r1_4
    r3 = arg3

void* r6_1
int64_t r8_5

if (*arg1 == 1)
    arg5 = *(arg1 + 8)
    
    if (arg5 u> r8_2)
        return sub_1000025a8(zx.q(*(arg1 + 0x50)) & 8, r2, r3, arg4, arg5, arg1, arg3, r8_2) __tailcall
    
    int64_t r0_2
    r0_2, r6_1, r8_5 = sub_100002c00(arg1)
    
    if (r0_2 != 0)
        return 1
else
    int64_t r0
    r0, r6_1, r8_5 = sub_100002c00(arg1, r2, r3, arg4, arg5)
    
    if (r0 != 0)
        return 1

return sub_1000025a8(*(r6_1 + 0x20), r1, r9, *(*(r6_1 + 0x28) + 0x18), arg5, r6_1, 1, r8_5)

// Original Name: sub_1000025a8
// Suggested Name: math_ops_function_1000025a8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000025a8

int64_t r9
int64_t var_80 = r9

if (arg1 == 0)
    uint64_t r0 = zx.q(*(arg6 + 0x58))
    uint64_t r1 = 1
    
    if (r0 != 3)
        r1 = r0
    
    uint64_t r5 = arg5 - arg8
    int64_t var_68 = arg4
    int64_t var_70 = arg2
    int64_t var_88 = arg3
    uint64_t r3
    
    if (r1 s<= 1)
        r3 = 0
        
        if (r1 != 0)
            r3 = r5
            r5 = 0
    else if (r1 == 2)
        r3 = r5 u>> 1
        r5 = (r5 + 1) u>> 1
    else
        r3 = r5
        r5 = 0
    
    uint64_t var_78_1 = r5
    int64_t var_40
    sub_1000019c0(&var_40, 0, r3)
    int64_t var_38
    int64_t var_58 = var_38
    return sub_1000027a8(var_38, 0, r3, arg4, r5, arg6, arg7, arg8, var_40) __tailcall

*(arg6 + 0x54) = 0x30
*(arg6 + 0x58) = 1
int64_t r0_1
int64_t r4
void* r6
int64_t result
int64_t r8
r0_1, r4, r6, result, r8 = sub_100002c00(arg6)

if (r0_1 != 0)
    return result

uint64_t r2 = zx.q(*(r6 + 0x58))
uint64_t r1_2 = 1

if (r2 != 3)
    r1_2 = r2

uint64_t r2_2 = arg5 - r8
uint64_t r3_1

if (r1_2 s<= 1)
    r3_1 = 0
    
    if (r1_2 != 0)
        r3_1 = r2_2
        r2_2 = 0
else if (r1_2 == 2)
    r3_1 = r2_2 u>> 1
    r2_2 = (r2_2 + 1) u>> 1
else
    r3_1 = r2_2
    r2_2 = 0

uint64_t var_78_2 = r2_2
int64_t var_20
sub_1000019c0(&var_20, 0, r3_1)
int64_t var_18
int64_t var_58_1 = var_18
return sub_100002a48(var_18, 0, r3_1, r4, arg5, r6, result, r8, var_20) __tailcall

// Original Name: sub_1000027a8
// Suggested Name: math_ops_function_1000027a8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000027a8

int64_t result

while (true)
    int64_t var_58
    
    if (arg9 u< var_58)
        int64_t r7 = 1
        int64_t r8_1 = arg9 + sub_100002ce0(1)
        
        if (arg9 u<= r8_1)
            r7 = 0
        
        if ((r7 & 1) == 0)
            result = 1
            arg9 = r8_1
            
            if (sub_1000027a8(*(arg6 + 0x20), zx.q(*(arg6 + 0x54)), *(*(arg6 + 0x28) + 0x20)) != 0)
                break
            
            continue
    
    uint64_t var_58_1 = zx.q(*(arg6 + 0x54))
    int64_t var_88
    int64_t var_70
    int64_t var_68
    int64_t r0_2
    void* r6
    r0_2, r6 = sub_100002c00(arg6, var_70, var_88, var_68)
    result = 1
    
    if (r0_2 == 0)
        *(r6 + 0x20)
        *(*(r6 + 0x28) + 0x18)
        int64_t r0_3
        void* r6_1
        r0_3, r6_1, result = sub_100002890()
        
        if (r0_3 == 0)
            int64_t var_68_1 = *(r6_1 + 0x28)
            *(r6_1 + 0x20)
            return sub_100002890() __tailcall
    
    break

return result

// Original Name: sub_100002890
// Suggested Name: math_ops_function_100002890
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002890

int64_t r1
int64_t var_70 = r1
int64_t var_78
int64_t var_50
sub_1000019c0(&var_50, 0, var_78)
int64_t var_48
int64_t var_60 = var_48
int64_t r4
int64_t r5
int64_t r6
int64_t r7
return sub_100002930(var_48, 0, var_78, r4, r5, r6, r7, var_50) __tailcall

// Original Name: sub_100002930
// Suggested Name: math_ops_function_100002930
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002930

int64_t result
int64_t i

do
    result = 0
    int64_t var_60
    
    if (arg8 u>= var_60)
        break
    
    int64_t r9_1 = 1
    int64_t r6_1 = arg8 + sub_100002ce0(1)
    result = 0
    
    if (arg8 u<= r6_1)
        r9_1 = 0
    
    if ((r9_1 & 1) != 0)
        break
    
    int64_t var_70
    void* var_68
    int64_t var_58
    i = sub_100002930(var_70, var_58, *(var_68 + 0x20))
    result = 1
    arg8 = r6_1
while (i == 0)
return result

// Original Name: sub_100002a48
// Suggested Name: math_ops_function_100002a48
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002a48

while (true)
    int64_t var_58
    
    if (arg9 u< var_58)
        int64_t r7 = 1
        arg8 = arg9 + sub_100002ce0(1)
        
        if (arg9 u<= arg8)
            r7 = 0
        
        arg7 = r7 & 1
        
        if (arg7 == 0)
            arg7 = 1
            arg9 = arg8
            
            if (sub_100002a48(*(arg6 + 0x20), zx.q(*(arg6 + 0x54)), *(*(arg6 + 0x28) + 0x20)) != 0)
                break
            
            continue
    
    uint64_t var_58_1 = zx.q(*(arg6 + 0x54))
    int64_t r4 = *(*(arg6 + 0x28) + 0x18)
    int64_t var_80
    int64_t var_60
    int64_t r0_2
    int64_t r2_2
    int64_t r3_1
    void* r6
    int64_t r8_1
    r0_2, r2_2, r3_1, r6, r8_1 = sub_100002af8(*(arg6 + 0x20), var_60, var_80, r4, arg5, arg6, arg7, arg8)
    
    if (r0_2 != 0)
        break
    
    int64_t r1_2 = *(r6 + 0x28)
    int64_t var_68 = r1_2
    return sub_100002af8(r1_2, r2_2, r3_1, r4, arg5, r6, 1, r8_1) __tailcall

return 1

// Original Name: sub_100002af8
// Suggested Name: math_ops_function_100002af8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002af8

int64_t var_70 = *(arg6 + 0x20)
int64_t var_78
int64_t var_30
sub_1000019c0(&var_30, 0, var_78)
int64_t var_28
int64_t var_60 = var_28
return sub_100002ba0(var_28, 0, var_78, arg4, arg5, arg6, arg7, arg8, var_30) __tailcall

// Original Name: sub_100002ba0
// Suggested Name: math_ops_function_100002ba0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002ba0

int64_t result
int64_t i

do
    result = 0
    int64_t var_60
    
    if (arg9 u>= var_60)
        break
    
    int64_t r8 = 1
    int64_t r6_1 = arg9 + sub_100002ce0(1)
    result = 0
    
    if (arg9 u<= r6_1)
        r8 = 0
    
    if ((r8 & 1) != 0)
        break
    
    int64_t var_70
    void* var_68
    int64_t var_58
    i = sub_100002ba0(var_70, var_58, *(var_68 + 0x20))
    result = 1
    arg9 = r6_1
while (i == 0)
return result

// Original Name: sub_100002c00
// Suggested Name: math_ops_function_100002c00
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002c00

if (arg2 << 0x20 u>> 0x20 != 0x110000)
    *(arg1 + 0x20)
    *(*(arg1 + 0x28) + 0x20)
    
    if (arg4 != 0)
        return sub_100002c70() __tailcall

if (arg3 == 0)
    jump(nop)

*(arg1 + 0x20)
*(*(arg1 + 0x28) + 0x18)
return sub_100002c70() __tailcall

// Original Name: sub_100002c70
// Suggested Name: math_ops_function_100002c70
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002c70

return 

// Original Name: sub_100002cc0
// Suggested Name: math_ops_function_100002cc0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002cc0

return -0x6a9975de0a946696

// Original Name: sub_100002cd8
// Suggested Name: math_ops_function_100002cd8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002cd8

return 

// Original Name: sub_100002ce0
// Suggested Name: math_ops_function_100002ce0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002ce0

return arg1

// Original Name: sub_100002cf0
// Suggested Name: math_ops_function_100002cf0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002cf0

int64_t r2_1 = *(arg1 + 0x10)
int64_t r3 = *(arg1 + 0x18)
int64_t r4 = *(arg1 + 0x20)
int64_t r5 = *arg1
int64_t r1 = *(arg1 + 8)
int64_t var_38 = 8
int64_t var_30 = 0
int64_t var_48 = 0
int64_t var_50 = 1
int64_t var_28
int64_t* var_58 = &var_28
int64_t var_20 = r1
var_28 = r5
int64_t var_8 = r4
int64_t var_10 = r3
int64_t var_18 = r2_1
sub_100002f08(&var_58, &var_18)
noreturn

// Original Name: sub_100002db8
// Suggested Name: math_ops_function_100002db8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002db8

syscall()
noreturn sub_100002dc0(arg1, arg2, arg3) __tailcall

// Original Name: sub_100002dc0
// Suggested Name: math_ops_function_100002dc0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002dc0

int64_t var_58 = arg3
int64_t var_60 = arg2
int64_t var_70
sub_100002340(&var_70, &var_58, sub_1000032e0)
int64_t r7 = var_70
int64_t var_80
sub_100002340(&var_80, &var_60, sub_1000032e0)
int64_t var_68
int64_t var_18 = var_68
int64_t var_20 = r7
int64_t* var_30 = &var_20
int64_t var_40 = 0
int64_t var_28 = 2
int64_t var_48 = 2
int64_t var_50 = 0x100003b48
int64_t var_78
int64_t var_8 = var_78
int64_t var_10 = var_80
sub_100002f08(&var_50, arg1)
noreturn

// Original Name: sub_100002f08
// Suggested Name: math_ops_function_100002f08
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002f08

int64_t var_30
sub_100001950(&var_30, *arg2, *(arg2 + 8), *(arg2 + 0x10), *(arg2 + 0x14))
int64_t var_50 = arg1
int64_t var_58 = 0x100003b28
int64_t var_60 = 1
int64_t var_48 = var_30
int64_t var_28
int64_t var_40 = var_28
int64_t var_20
int64_t var_38 = var_20
sub_1000018d8(&var_60)
noreturn

// Original Name: sub_100002fc0
// Suggested Name: math_ops_function_100002fc0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002fc0

syscall()
return sub_100002fc8(arg1, arg2, arg3) __tailcall

// Original Name: sub_100002fc8
// Suggested Name: associated_token_handler_100002fc8
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100002fc8

int64_t r4 = 0x27
int64_t r3 = data_100003af8
void var_27

if (0x2710 u<= arg1)
    int64_t r4_1 = 0
    uint64_t i
    
    do
        i = arg1
        arg1 u/= 0x2710
        int16_t r7_1 = i.w - arg1.w * 0x2710
        void* r6_3 = &var_27 + r4_1
        uint64_t r8_3 = zx.q(r7_1) u/ 0x64
        void* r5_2 = r3 + (r8_3 << 1)
        char r9_3 = *r5_2
        *(r6_3 + 0x24) = *(r5_2 + 1)
        *(r6_3 + 0x23) = r9_3
        void* r5_5 = r3 + (zx.q(r7_1 - r8_3.w * 0x64) << 1)
        char r7_5 = *r5_5
        *(r6_3 + 0x26) = *(r5_5 + 1)
        *(r6_3 + 0x25) = r7_5
        r4_1 -= 4
    while (i u> 0x5f5e0ff)
    r4 = r4_1 + 0x27

if (arg1 s> 0x63)
    uint64_t r5_9 = zx.q(arg1.w) u/ 0x64
    void* r0_4 = r3 + (zx.q(arg1.w - r5_9.w * 0x64) << 1)
    r4 -= 2
    void* r1_3 = &var_27 + r4
    char r6_4 = *r0_4
    *(r1_3 + 1) = *(r0_4 + 1)
    *r1_3 = r6_4
    arg1 = r5_9

int64_t r4_2

if (0xa s> arg1)
    r4_2 = r4 - 1
    *(&var_27 + r4_2) = arg1.b + 0x30
else
    void* r3_1 = r3 + (arg1 << 1)
    r4_2 = r4 - 2
    void* r1_5 = &var_27 + r4_2
    char r5_10 = *r3_1
    *(r1_5 + 1) = *(r3_1 + 1)
    *r1_5 = r5_10

void* var_1000 = &var_27 + r4_2
int64_t var_ff8 = 0x27 - r4_2
return sub_100002358(arg3, arg2, 0x10000391e, 0, &__return_addr)

// Original Name: sub_1000032e0
// Suggested Name: math_ops_function_1000032e0
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 1000032e0

return sub_100002fc8(sub_100001918(arg1), 1, arg2)

// Original Name: sub_100003318
// Suggested Name: math_ops_function_100003318
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100003318

if (arg3 != 0)
    void* r1 = arg1
    
    do
        *r1 = *arg2
        r1 += 1
        arg2 += 1
        arg3 -= 1
    while (arg3 != 0)

return arg1

// Original Name: sub_100003370
// Suggested Name: math_ops_function_100003370
// Library Tag: math_ops
// Confidence: 0.10
// Sub Number: 100003370

uint64_t r0_1 = arg2 u>> 0x20
uint64_t r3_1 = arg4 u>> 0x20
uint64_t r4_1 = arg4 << 0x20 u>> 0x20
uint64_t r2_1 = arg2 << 0x20 u>> 0x20
int64_t r4_2 = r4_1 * r2_1
int64_t r0_4 = (r4_2 u>> 0x20) + r4_1 * r0_1
int64_t r0_7 = (r0_4 << 0x20 u>> 0x20) + r3_1 * r2_1
*(arg1 + 8) = arg5 * arg2 + arg3 * arg4 + r3_1 * r0_1 + (r0_4 u>> 0x20) + (r0_7 u>> 0x20)
int64_t result = r0_7 << 0x20 | r4_2 << 0x20 u>> 0x20
*arg1 = result
return result

