// Cached result for function: sub_100000378
// Binary: /Users/giraffe/Downloads/Work/Solana/ebpf/memo_onchain.so
// Generated: e8b31ec5d72f6ae3ba3ee3a6578b061e.rs

use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint::ProgramResult,
    msg,
    program::{invoke, invoke_signed},
    program_error::ProgramError,
    program_pack::Pack,
    pubkey::Pubkey,
    rent::Rent,
    system_instruction,
    sysvar::{clock::Clock, rent::Rent as RentSysvar, Sysvar},
};
use spl_token::{
    instruction::{approve, close_account, initialize_account, mint_to, revoke, transfer},
    state::{Account as TokenAccount, Mint},
};

#[derive(Debug, PartialEq)]
pub enum SplTokenInstruction {
    InitializeMint {
        decimals: u8,
        mint_authority: Pubkey,
        freeze_authority: Option<Pubkey>,
    },
    InitializeAccount,
    InitializeMultisig {
        m: u8,
    },
    Transfer {
        amount: u64,
    },
    Approve {
        amount: u64,
    },
    Revoke,
    SetAuthority {
        new_authority: Option<Pubkey>,
        authority_type: u8, // AuthorityType enum
    },
    MintTo {
        amount: u64,
    },
    Burn {
        amount: u64,
    },
    CloseAccount,
    FreezeAccount,
    ThawAccount,
    TransferChecked {
        amount: u64,
        decimals: u8,
    },
    ApproveChecked {
        amount: u64,
        decimals: u8,
    },
    MintToChecked {
        amount: u64,
        decimals: u8,
    },
    BurnChecked {
        amount: u64,
        decimals: u8,
    },
    InitializeAccount2 {
        owner: Pubkey,
    },
    SyncNative,
    InitializeAccount3 {
        owner: Pubkey,
    },
    InitializeMint2 {
        decimals: u8,
        mint_authority: Pubkey,
        freeze_authority: Option<Pubkey>,
    },
    // Add other SPL Token instructions as needed
}

// Placeholder for Anchor's Context struct
// In a real Anchor program, this would be generated by the framework
// and contain the accounts passed to the instruction.
pub struct Context<'a, 'info> {
    pub accounts: &'a [AccountInfo<'info>],
    pub remaining_accounts: &'a [AccountInfo<'info>],
    pub program_id: &'a Pubkey,
}

impl<'a, 'info> Context<'a, 'info> {
    pub fn new(
        accounts: &'a [AccountInfo<'info>],
        program_id: &'a Pubkey,
    ) -> Self {
        Context {
            accounts,
            remaining_